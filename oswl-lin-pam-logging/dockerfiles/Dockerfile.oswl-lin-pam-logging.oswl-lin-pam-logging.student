#
# Labtainer Dockerfile
#
#  This is the default Labtainer Dockerfile template, plesae choose the appropriate
#  base image below.
#
# The labtainer.base image includes the following packages:
#    build-essential  expect  file  gcc-multilib  gdb  iputils-ping  less  man  manpages-dev 
#    net-tools  openssh-client  python  sudo  tcl8.6  vim  zip  hexedit  rsyslog
#
# The labtainer.network image adds the following packages:
#   openssl openssh-server openvpn wget tcpdump  update-inetd  xinetd
#
ARG registry
FROM $registry/labtainer.network.ssh2
#FROM $registry/labtainer.centos
#FROM $registry/labtainer.lamp
#
#  lab is the fully qualified image name, e.g., mylab.some_container.student
#  labdir is the name of the lab, e.g., mylab 
#  imagedir is the name of the container
#  user_name is the USER from the start.config, if other than ubuntu,
#            then that user must be added in this dockerfile
#            before the USER command
#
ARG lab
ARG labdir
ARG imagedir
ARG user_name
ARG password
ARG apt_source
ARG version
LABEL version=$version
ENV APT_SOURCE $apt_source
RUN /usr/bin/apt-source.sh
#
#  put package installation here, e.g.,
#     RUN apt-get update && apt-get install -y --no-install-recommends somepackage
#
#
#
# Install the system files found in the _system directory
#
ADD $labdir/$imagedir/sys_tar/sys.tar /
ADD $labdir/sys_$lab.tar.gz /
#
RUN useradd -ms /bin/bash $user_name
RUN echo "$user_name:$password" | chpasswd
RUN adduser $user_name sudo
# replace above with below for centos/fedora
#RUN usermod $user_name -a -G wheel
RUN mkdir -p /lib/security
RUN sudo useradd -m -s /bin/bash -p $(openssl passwd -1 'test') test
RUN apt update && apt install -y \
    gcc \
    make \
    libpam0g-dev

RUN echo '#include <security/pam_modules.h>' > /etc/pam.d/pam_custom.c && \
    echo '#include <security/pam_ext.h>' >> /etc/pam.d/pam_custom.c && \
    echo '#include <syslog.h>' >> /etc/pam.d/pam_custom.c && \
    echo '#include <stdio.h>' >> /etc/pam.d/pam_custom.c && \
    echo '#include <string.h>' >> /etc/pam.d/pam_custom.c && \
    echo '' >> /etc/pam.d/pam_custom.c && \
    echo 'PAM_EXTERN int pam_sm_authenticate(pam_handle_t *pamh, int flags, int argc, const char **argv) {' >> /etc/pam.d/pam_custom.c && \
    echo '    const char *user;' >> /etc/pam.d/pam_custom.c && \
    echo '    pam_get_user(pamh, &user, NULL);' >> /etc/pam.d/pam_custom.c && \
    echo '' >> /etc/pam.d/pam_custom.c && \
    echo '    if (strcmp(user, "admin") == 0) {' >> /etc/pam.d/pam_custom.c && \
    echo '        pam_syslog(pamh, LOG_NOTICE, "Admin login detected: %s", user);' >> /etc/pam.d/pam_custom.c && \
    echo '        return PAM_SUCCESS;' >> /etc/pam.d/pam_custom.c && \
    echo '    } else {' >> /etc/pam.d/pam_custom.c && \
    echo '        pam_syslog(pamh, LOG_NOTICE, "Unauthorized user: %s", user);' >> /etc/pam.d/pam_custom.c && \
    echo '        return PAM_AUTH_ERR;' >> /etc/pam.d/pam_custom.c && \
    echo '    }' >> /etc/pam.d/pam_custom.c && \
    echo '}' >> /etc/pam.d/pam_custom.c && \
    echo '' >> /etc/pam.d/pam_custom.c && \
    echo 'PAM_EXTERN int pam_sm_setcred(pam_handle_t *pamh, int flags, int argc, const char **argv) {' >> /etc/pam.d/pam_custom.c && \
    echo '    return PAM_SUCCESS;' >> /etc/pam.d/pam_custom.c && \
    echo '}' >> /etc/pam.d/pam_custom.c
#  **** Perform all root operations, e.g.,           ****
#  **** "apt-get install" prior to the USER command. ****
#
USER $user_name
ENV HOME /home/$user_name
#
# Install files in the user home directory
#
ADD $labdir/$imagedir/home_tar/home.tar $HOME
# remove after docker fixes problem with empty tars
RUN rm -f $HOME/home.tar
ADD $labdir/$lab.tar.gz $HOME
#
#  The first thing that executes on the container.
#
USER root
CMD ["/bin/bash", "-c", "exec /sbin/init --log-target=journal 3>&1"]

